[{"path":"https://kwb-r.github.io/kwb.code/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2018-2022 Kompetenzzentrum Wasser Berlin gGmbH (KWB) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"provide-some-example-r-scripts-locally","dir":"Articles","previous_headings":"","what":"Provide some example R scripts locally","title":"How to use this package","text":"order test functions package R scripts downloaded GitHub provided locally:","code":"# Define URLs to some example scripts urls <- kwb.utils::resolve(list(   kwb = \"https://raw.githubusercontent.com/KWB-R\",   utils = \"<kwb>/kwb.utils/master/R\",   log = \"<utils>/log.R\",   main = \"<utils>/main.R\",   fakin = \"<kwb>/kwb.fakin/master/R/plot_file_distribution.R\" ))  # Create a temporary folder root <- kwb.utils::createDirectory(   kwb.utils::tempSubdirectory(\"test\"),    dbg = FALSE )  # Helper function to download a text file to the temporary folder download_script <- function(url) {   download.file(     url,      destfile = file.path(root, basename(url)),      mode = \"wt\"   ) }  # Download three scripts to the temporary folder download_script(urls$fakin) download_script(urls$log) download_script(urls$main)"},{"path":[]},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"analyse","dir":"Articles","previous_headings":"Exported functions","what":"analyse()","title":"How to use this package","text":"parse tree analysed. node tree given following attributes: type mode class length text n_modes n_classes path fulltype children idea probably use information extract objects special interest parse tree (see : get_elements_by_type())","code":"x <- parse(urls$log)  result <- kwb.code::analyse(x) #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class \"POSIXct\" #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE."},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"arg_names","dir":"Articles","previous_headings":"","what":"arg_names()","title":"How to use this package","text":"function returns names arguments function:","code":"kwb.code::arg_names(kwb.utils::selectColumns) #> [1] \"x\"       \"columns\" \"pattern\" \"drop\"    \"do.stop\""},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"find_string_constants","dir":"Articles","previous_headings":"","what":"find_string_constants()","title":"How to use this package","text":"function requires directory R scripts. scripts parsed. String constants used script returned.","code":"string_constants <- kwb.code::find_string_constants(root) #> Splitting paths ... ok. (0.00 secs)  #> Removing the first 8 path segments ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/log.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/main.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/plot_file_distribution.R ... ok. (0.00 secs)  knitr::kable(string_constants)"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"find_weaknesses_in_scripts","dir":"Articles","previous_headings":"","what":"find_weaknesses_in_scripts()","title":"How to use this package","text":"Check expressions scripts can improved.","code":"x <- parse(text = c(   \"texts <- c(\",    \"  paste('this is a very long', 'text'),\",   \"  paste('this is a very long', 'string')\",   \")\",   \"\",   \"indices <- 1:length(texts)\" ))  weaknesses <- kwb.code::find_weaknesses_in_scripts(   x = list(test = x),    min_duplicate_frequency = 2L )  knitr::kable(weaknesses)"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"get_elements_by_type","dir":"Articles","previous_headings":"","what":"get_elements_by_type","title":"How to use this package","text":"function groups similar elements found parse tree.","code":"# Parse an R script file (here, a file from kwb.utils) x <- parse(urls$log)  # For each \"type\" of code segment, extract all occurrences elements <- kwb.code::get_elements_by_type(x, result = result)  # Show all code blocks in curly braces elements[[\"language|call|{|2|\"]] #> [[1]] #> { #>     cat(\"***\", ...) #> } #>  #> [[2]] #> { #>     cat(\"***\", ..., \"\\n\") #> } #>  #> [[3]] #> { #>     catIf(dbg, \"*** ok.\\n\") #> } #>  #> [[4]] #> { #>     catIf(dbg, \"***\", ..., \"... \") #> }"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"get_full_function_info","dir":"Articles","previous_headings":"","what":"get_full_function_info()","title":"How to use this package","text":"function analyses list parse trees read R script. provides information functions defined scripts: script: script name functionName: function name n.def: always 1 (?) bodyClass: always “{” (?) n.args: number arguments n.defaults: number arguments default n.expr: number expressions","code":"trees <- kwb.code::parse_scripts(root, dbg = FALSE) function_info <- kwb.code::get_full_function_info(trees) knitr::kable(function_info)"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"get_names_of_used_packages","dir":"Articles","previous_headings":"","what":"get_names_of_used_packages()","title":"How to use this package","text":"packages used scripts? function simply looks calls library(). take account functions called :: following simple grep() reveals: TODO: Use another function instead…","code":"kwb.code::get_names_of_used_packages(root) #> Analysing /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/log.R ... ok. (0.00 secs)  #> Analysing /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/main.R ... ok. (0.00 secs)  #> Analysing /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/plot_file_distribution.R ... ok. (0.00 secs) #> character(0) pattern <- \"[^A-Za-z_.]([A-Za-z_.]+::[A-Za-z_.]+)[^A-Za-z_.]\"  text <- grep(pattern, readLines(urls$fakin), value = TRUE)  unique(kwb.utils::extractSubstring(pattern, text, index = 1)) #> [1] \"kwb.pathdict::random_paths\"        \"kwb.utils::noFactorDataFrame\"      #> [3] \"kwb.fakin::plot_file_distribution\" \"kwb.utils::assignPackageObjects\"   #> [5] \"kwb.utils::preparePdfIf\"           \"kwb.utils::finishAndShowPdfIf\"     #> [7] \"cowplot::plot_grid\""},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"get_package_function_usage","dir":"Articles","previous_headings":"","what":"get_package_function_usage()","title":"How to use this package","text":"","code":"tree <- kwb.code::parse_scripts(root, dbg = FALSE) function_usage <- kwb.code::get_package_function_usage(   tree,    package = \"kwb.utils\" )  knitr::kable(function_usage)"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"get_package_usage_per_script","dir":"Articles","previous_headings":"","what":"get_package_usage_per_script()","title":"How to use this package","text":"","code":"package_usage <- kwb.code::get_package_usage_per_script(   root,    packages = \"kwb.utils\" ) #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/log.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/main.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/plot_file_distribution.R ... ok. (0.00 secs) #> 3 scripts have been parsed. #> Checking usage of kwb.utils ...  #> ok. (0.03 secs) knitr::kable(package_usage)"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"get_string_constants_in_scripts","dir":"Articles","previous_headings":"","what":"get_string_constants_in_scripts()","title":"How to use this package","text":"","code":"string_constants <- kwb.code::get_string_constants_in_scripts(root) #> Splitting paths ... ok. (0.00 secs)  #> Removing the first 8 path segments ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/log.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/main.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/plot_file_distribution.R ... ok. (0.00 secs) knitr::kable(string_constants)"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"parse_scripts","dir":"Articles","previous_headings":"","what":"parse_scripts()","title":"How to use this package","text":"","code":"x <- kwb.code::parse_scripts(root) #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/log.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/main.R ... ok. (0.00 secs)  #> Reading /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpydcKTj/test/plot_file_distribution.R ... ok. (0.00 secs)  str(x, 2) #> List of 3 #>  $ log.R                   :length 4 expression(.log <- function(...) {  cat(\"***\", ...) }, .logline <- function(...) {  cat(\"***\", ..., \"\\n\") }, .log| __truncated__ ... #>   ..- attr(*, \"n.lines\")= int 50 #>  $ main.R                  :length 18 expression(randomValuesWithSum <- function(n, sumOfValues, names = seq_len(n)) {  breaks <- sort(sample(sumOfValu| __truncated__ ... #>   ..- attr(*, \"n.lines\")= int 575 #>  $ plot_file_distribution.R:length 2 expression(plot_file_distribution <- function(file_data, start_path, n_root_parts,  ..., to_pdf = TRUE) {  data_s| __truncated__ #>   ..- attr(*, \"n.lines\")= int 93"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"to_full_script_info","dir":"Articles","previous_headings":"","what":"to_full_script_info()","title":"How to use this package","text":"function creates statistics R scripts.","code":"script_statistics <- kwb.code::to_full_script_info(trees)  knitr::kable(script_statistics)"},{"path":"https://kwb-r.github.io/kwb.code/articles/usage.html","id":"walk_tree","dir":"Articles","previous_headings":"","what":"walk_tree()","title":"How to use this package","text":"function walks along parse tree.","code":"x <- parse(urls$log)  result <- kwb.code::walk_tree(x, dbg = FALSE)"},{"path":"https://kwb-r.github.io/kwb.code/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hauke Sonnenberg. Author, maintainer. Michael Rustler. Contributor.            0000-0003-0647-7726 . Funder. . Copyright holder.","code":""},{"path":"https://kwb-r.github.io/kwb.code/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sonnenberg H (2023). kwb.code: Analyse R Code!. R package version 0.2.0, https://github.com/KWB-R/kwb.code.","code":"@Manual{,   title = {kwb.code: Analyse Your R Code!},   author = {Hauke Sonnenberg},   year = {2023},   note = {R package version 0.2.0},   url = {https://github.com/KWB-R/kwb.code}, }"},{"path":"https://kwb-r.github.io/kwb.code/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyse Your R Code!","text":"installing latest release R package run following code :","code":"# Enable repository from kwb-r options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org'))    # Download and install kwb.code in R install.packages('kwb.code')  # Browse the kwb.code manual pages help(package = 'kwb.code')"},{"path":"https://kwb-r.github.io/kwb.code/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Analyse Your R Code!","text":"lot R scripts want know different packages loaded within scripts, may use function get_names_of_used_packages:","code":"# Set path to directory in which to look recursively for R scripts root_dir <- \"~/Desktop/R-Development\"  # Get the names of used packages   packages <- kwb.code::get_names_of_used_packages(root_dir)  # Show the names of the packages packages"},{"path":"https://kwb-r.github.io/kwb.code/reference/analyse.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse the Parse Tree of an R Script — analyse","title":"Analyse the Parse Tree of an R Script — analyse","text":"Analyse Parse Tree R Script","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/analyse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse the Parse Tree of an R Script — analyse","text":"","code":"analyse(x, path = \"\")"},{"path":"https://kwb-r.github.io/kwb.code/reference/analyse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse the Parse Tree of an R Script — analyse","text":"x parse tree returned parse path internal use (function called recursively)","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/analyse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse the Parse Tree of an R Script — analyse","text":"list representing type information nodes parse tree","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/analyse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyse the Parse Tree of an R Script — analyse","text":"","code":"# Parse an R script file (here, a file from kwb.utils) x <- parse(\"https://raw.githubusercontent.com/KWB-R/kwb.utils/master/R/log.R\")  # Analyse the parse tree (This may take some time!) result <- kwb.code::analyse(x) #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE.  # Show the structure of the result list (only 3 levels!) str(result, 3) #> List of 11 #>  $ type     : chr \"expression\" #>  $ mode     : chr \"expression\" #>  $ class    : chr \"expression\" #>  $ length   : int 4 #>  $ text     : chr \"[1].log <- function(...) {\\n    ...\" #>  $ is       : NULL #>  $ n_modes  : int 1 #>  $ n_classes: int 1 #>  $ path     : chr \"\" #>  $ fulltype : chr \"expression|expression|expression|4|\" #>  $ children :List of 4 #>   ..$ :List of 11 #>   .. ..$ type     : chr \"language\" #>   .. ..$ mode     : chr \"call\" #>   .. ..$ class    : chr \"<-\" #>   .. ..$ length   : int 3 #>   .. ..$ text     : chr \"[1]<-[2].log[3]function(...) { ...\" #>   .. ..$ is       : NULL #>   .. ..$ n_modes  : int 1 #>   .. ..$ n_classes: int 1 #>   .. ..$ path     : chr \"/1\" #>   .. ..$ fulltype : chr \"language|call|<-|3|\" #>   .. ..$ children :List of 3 #>   ..$ :List of 11 #>   .. ..$ type     : chr \"language\" #>   .. ..$ mode     : chr \"call\" #>   .. ..$ class    : chr \"<-\" #>   .. ..$ length   : int 3 #>   .. ..$ text     : chr \"[1]<-[2].logline[3]function(.. ...\" #>   .. ..$ is       : NULL #>   .. ..$ n_modes  : int 1 #>   .. ..$ n_classes: int 1 #>   .. ..$ path     : chr \"/2\" #>   .. ..$ fulltype : chr \"language|call|<-|3|\" #>   .. ..$ children :List of 3 #>   ..$ :List of 11 #>   .. ..$ type     : chr \"language\" #>   .. ..$ mode     : chr \"call\" #>   .. ..$ class    : chr \"<-\" #>   .. ..$ length   : int 3 #>   .. ..$ text     : chr \"[1]<-[2].logok[3]function(dbg  ...\" #>   .. ..$ is       : NULL #>   .. ..$ n_modes  : int 1 #>   .. ..$ n_classes: int 1 #>   .. ..$ path     : chr \"/3\" #>   .. ..$ fulltype : chr \"language|call|<-|3|\" #>   .. ..$ children :List of 3 #>   ..$ :List of 11 #>   .. ..$ type     : chr \"language\" #>   .. ..$ mode     : chr \"call\" #>   .. ..$ class    : chr \"<-\" #>   .. ..$ length   : int 3 #>   .. ..$ text     : chr \"[1]<-[2].logstart[3]function(d ...\" #>   .. ..$ is       : NULL #>   .. ..$ n_modes  : int 1 #>   .. ..$ n_classes: int 1 #>   .. ..$ path     : chr \"/4\" #>   .. ..$ fulltype : chr \"language|call|<-|3|\" #>   .. ..$ children :List of 3"},{"path":"https://kwb-r.github.io/kwb.code/reference/arg_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Argument Names of a Function — arg_names","title":"Get Argument Names of a Function — arg_names","text":"Get Argument Names Function","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/arg_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Argument Names of a Function — arg_names","text":"","code":"arg_names(x)"},{"path":"https://kwb-r.github.io/kwb.code/reference/arg_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Argument Names of a Function — arg_names","text":"x function name function","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/arg_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Argument Names of a Function — arg_names","text":"vector character","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/arg_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Argument Names of a Function — arg_names","text":"","code":"arg_names(\"sum\") #> [1] \"...\"   \"na.rm\" arg_names(mean) #> [1] \"x\"   \"...\""},{"path":"https://kwb-r.github.io/kwb.code/reference/extract_from_parse_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Elements from Parse Tree of R Script — extract_from_parse_tree","title":"Extract Elements from Parse Tree of R Script — extract_from_parse_tree","text":"idea function collect objects interest parse  tree, e.g. names functions called script. Therefore, set function matches returns TRUE nodes tree interest.","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/extract_from_parse_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Elements from Parse Tree of R Script — extract_from_parse_tree","text":"","code":"extract_from_parse_tree(   x,   matches = matches_function,   dbg = FALSE,   path = integer(),   parent = NULL,   index = -1 )"},{"path":"https://kwb-r.github.io/kwb.code/reference/extract_from_parse_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Elements from Parse Tree of R Script — extract_from_parse_tree","text":"x parse tree returned parse matches function called node tree. Give  function returns TRUE object selected FALSE else. value TRUE must given attribute  name expected character length one. dbg TRUE node printed climing tree path internal use parent internal use index internal use","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/extract_from_parse_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Elements from Parse Tree of R Script — extract_from_parse_tree","text":"vector character NULL","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/find_string_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Show String Constants Used in R Scripts — find_string_constants","title":"Show String Constants Used in R Scripts — find_string_constants","text":"Show String Constants Used R Scripts","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/find_string_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show String Constants Used in R Scripts — find_string_constants","text":"","code":"find_string_constants(root = \"./R\")"},{"path":"https://kwb-r.github.io/kwb.code/reference/find_string_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show String Constants Used in R Scripts — find_string_constants","text":"root path look recursively R scripts","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/find_weaknesses_in_scripts.html","id":null,"dir":"Reference","previous_headings":"","what":"Find weaknesses in R scripts — find_weaknesses_in_scripts","title":"Find weaknesses in R scripts — find_weaknesses_in_scripts","text":"Find weaknesses R scripts","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/find_weaknesses_in_scripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find weaknesses in R scripts — find_weaknesses_in_scripts","text":"","code":"find_weaknesses_in_scripts(   x = parse_scripts(root),   root = NULL,   min_duplicate_string_length = 6L,   min_duplicate_frequency = 3L )"},{"path":"https://kwb-r.github.io/kwb.code/reference/find_weaknesses_in_scripts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find weaknesses in R scripts — find_weaknesses_in_scripts","text":"x list named parse trees returned parse_scripts. required root given. root path folder containing R scripts min_duplicate_string_length minimum number characters  string constant must considered duplicate min_duplicate_frequency minimum frequency string constant considered duplicate","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/find_weaknesses_in_scripts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find weaknesses in R scripts — find_weaknesses_in_scripts","text":"data frame columns file, expression,  frequency, recommendation","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_elements_by_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Sections of Same ","title":"Extract Sections of Same ","text":"Extract Sections \"Type\" Parse Tree","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_elements_by_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Sections of Same ","text":"","code":"get_elements_by_type(x, result = NULL, dbg = TRUE)"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_elements_by_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Sections of Same ","text":"x parse tree returned parse result optional. Result returned analyse dbg TRUE, debug messages shown","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_elements_by_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Sections of Same ","text":"","code":"# Parse an R script file (here, a file from kwb.utils) x <- parse(\"https://raw.githubusercontent.com/KWB-R/kwb.utils/master/R/log.R\")  # For each \"type\" of code segment, extract all occurrences elements <- get_elements_by_type(x) #> Analysing the parse tree ... Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXct.default(x) :  #>   do not know how to convert 'x' to class “POSIXct” #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.finite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.infinite.POSIXlt(x) returned an error. Returning FALSE. #> Error in as.POSIXlt.character(x, tz, ...) :  #>   character string is not in a standard unambiguous format #> is.nan.POSIXlt(x) returned an error. Returning FALSE. #> ok. (0.56 secs)   # Show all for-loops elements$`language|call|for|4|` #> NULL  # Show all if-statements elements$`language|call|if|3|` #> NULL  # Show all if-else-statements elements$`language|call|if|4|` #> NULL"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_full_function_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information on function definitions in parsed R scripts — get_full_function_info","title":"Get information on function definitions in parsed R scripts — get_full_function_info","text":"Get information function definitions parsed R scripts","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_full_function_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information on function definitions in parsed R scripts — get_full_function_info","text":"","code":"get_full_function_info(trees)"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_full_function_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information on function definitions in parsed R scripts — get_full_function_info","text":"trees list R script parse trees provided parse_scripts","code":""},{"path":[]},{"path":"https://kwb-r.github.io/kwb.code/reference/get_function_call_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Which Function is Called How Often? — get_function_call_frequency","title":"Which Function is Called How Often? — get_function_call_frequency","text":"Function Called Often?","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_function_call_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which Function is Called How Often? — get_function_call_frequency","text":"","code":"get_function_call_frequency(tree, simple = FALSE, dbg = TRUE)"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_function_call_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which Function is Called How Often? — get_function_call_frequency","text":"tree parse tree returned parse_scripts simple TRUE, simple approach using simple regular expression used. approach fast correct e.g. counts function calls commented even string expressions just look like function calls. Leaving argument default, FALSE, return real function calls evaluating full structure parse tree. dbg TRUE, debug messages shown","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_function_call_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which Function is Called How Often? — get_function_call_frequency","text":"data frame columns name (name function), count (number times function called)","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_names_of_used_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names of Packages Used in R-Scripts — get_names_of_used_packages","title":"Get Names of Packages Used in R-Scripts — get_names_of_used_packages","text":"Get Names Packages Used R-Scripts","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_names_of_used_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names of Packages Used in R-Scripts — get_names_of_used_packages","text":"","code":"get_names_of_used_packages(root_dir, pattern = \"[.][rR](md)?$\")"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_names_of_used_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names of Packages Used in R-Scripts — get_names_of_used_packages","text":"root_dir directory look recursively R-scripts pattern regular expression matching names files considered","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_function_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"How Often Are the Functions of a Package Used? — get_package_function_usage","title":"How Often Are the Functions of a Package Used? — get_package_function_usage","text":"Often Functions Package Used?","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_function_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"How Often Are the Functions of a Package Used? — get_package_function_usage","text":"","code":"get_package_function_usage(tree, package, simple = FALSE, by_script = FALSE)"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_function_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"How Often Are the Functions of a Package Used? — get_package_function_usage","text":"tree parse tree returned parse_scripts package name package (must installed) simple TRUE, simple approach using simple regular expression used. approach fast correct e.g. counts function calls commented even string expressions just look like function calls. Leaving argument default, FALSE, return real function calls evaluating full structure parse tree. by_script TRUE functions counted returned script, otherwise counted scripts","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_function_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"How Often Are the Functions of a Package Used? — get_package_function_usage","text":"data frame columns name (name function),  prefixed (number function calls prefixed <package>:: <package>:::), non_prefixed (number function calls    prefixed package name) total (total    number function calls)","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_function_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How Often Are the Functions of a Package Used? — get_package_function_usage","text":"","code":"# Read all scripts that are provided in the kwb.fakin package tree <- kwb.code::parse_scripts(root = system.file(package = \"kwb.fakin\"))  # Check which functions from kwb.utils are used and how often get_package_function_usage(tree, package = \"kwb.utils\") #> Warning: Unknown or uninitialised column: `name`. #> # A tibble: 0 × 1 #> # ℹ 1 variable: package <chr>  # Hm, this does not seem to be the whole truth..."},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_usage_per_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Package Usage per Script — get_package_usage_per_script","title":"Get Package Usage per Script — get_package_usage_per_script","text":"Get Package Usage per Script","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_usage_per_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Package Usage per Script — get_package_usage_per_script","text":"","code":"get_package_usage_per_script(root, packages, pattern = \"\\\\.R$\", ...)"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_usage_per_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Package Usage per Script — get_package_usage_per_script","text":"root root directory R scripts packages vector package names checked pattern default: \"\\.R$\" ... additional arguments passed get_package_function_usage","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_package_usage_per_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Package Usage per Script — get_package_usage_per_script","text":"tibble information used packages","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_string_constants_in_scripts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Frequency of String Constant Usage in R Scripts — get_string_constants_in_scripts","title":"Get Frequency of String Constant Usage in R Scripts — get_string_constants_in_scripts","text":"Get Frequency String Constant Usage R Scripts","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_string_constants_in_scripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Frequency of String Constant Usage in R Scripts — get_string_constants_in_scripts","text":"","code":"get_string_constants_in_scripts(   root,   scripts = dir(root, \"\\\\.[Rr]$\", recursive = TRUE),   two_version_check = TRUE,   FUN = NULL )"},{"path":"https://kwb-r.github.io/kwb.code/reference/get_string_constants_in_scripts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Frequency of String Constant Usage in R Scripts — get_string_constants_in_scripts","text":"root path folder look R scripts scripts optional. Paths R scripts search string constants, relative root two_version_check TRUE (default), two different  implementations function used results compared internally. Set argument FALSE get result fast possible. FUN optional. Function used browse code tree string constants. NULL (default),  kwb.code:::fetch_string_constants_1 used.","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_string_constants_in_scripts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Frequency of String Constant Usage in R Scripts — get_string_constants_in_scripts","text":"data frame columns file_id (file identifier),  string (string constant found file) count (number   occurrences string counted file). file identifier can   resolved full file name using \"file database\" stored   attribute \"file_db\".","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/get_string_constants_in_scripts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Frequency of String Constant Usage in R Scripts — get_string_constants_in_scripts","text":"","code":"root <- system.file(package = \"kwb.code\") constants <- get_string_constants_in_scripts(root) #> Splitting paths ... ok. (0.00 secs)  #> Removing the first 7 path segments ... ok. (0.00 secs)  #> Reading /Users/runner/work/_temp/Library/kwb.code/extdata/cleanCodeBasics.R ... ok. (0.00 secs)  #> Reading /Users/runner/work/_temp/Library/kwb.code/extdata/codeUsage.R ... ok. (0.00 secs)  #> Reading /Users/runner/work/_temp/Library/kwb.code/extdata/testcalls_1.R ... ok. (0.00 secs)  #> Reading /Users/runner/work/_temp/Library/kwb.code/extdata/testcalls_2.R ... ok. (0.00 secs)   # Get paths to files from \"file database\" stored in attribute \"file_db\" kwb.utils::getAttribute(constants, \"file_db\") #> $files #>   file_id         file_name folder_id #> 1 file_01 cleanCodeBasics.R folder_01 #> 2 file_02       codeUsage.R folder_01 #> 3 file_03     testcalls_1.R folder_01 #> 4 file_04     testcalls_2.R folder_01 #>  #> $folders #>   folder_id folder_path #> 1 folder_01     extdata #>"},{"path":"https://kwb-r.github.io/kwb.code/reference/parse_scripts.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse all given R scripts into a tree structure — parse_scripts","title":"Parse all given R scripts into a tree structure — parse_scripts","text":"Parse given R scripts tree structure","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/parse_scripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse all given R scripts into a tree structure — parse_scripts","text":"","code":"parse_scripts(   root,   scripts = dir(root, \"\\\\.R$\", ignore.case = TRUE, recursive = TRUE),   dbg = TRUE )"},{"path":"https://kwb-r.github.io/kwb.code/reference/parse_scripts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse all given R scripts into a tree structure — parse_scripts","text":"root root directory relative paths given scripts relate scripts relative file paths R scripts. default files ending \".R\" \".r\" root folder (recursively) parsed. dbg TRUE debug messages shown","code":""},{"path":[]},{"path":"https://kwb-r.github.io/kwb.code/reference/parse_scripts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse all given R scripts into a tree structure — parse_scripts","text":"","code":"if (FALSE) { # Download some example code files from github... url.base <- \"https://raw.githubusercontent.com/hsonne/blockrand2/master/R/\" urls <- paste0(url.base, c(\"blockrand2_create.R\", \"blockrand2_main.R\"))  targetdir <- file.path(tempdir(), \"blockrand2\") targetdir <- kwb.utils::createDirectory(targetdir)  for (url in urls) {   download.file(url, file.path(targetdir, basename(url))) }  # By default, all R scripts below the root are parse trees <- parse_scripts(root = targetdir)  # All elements of trees are expressions sapply(trees, is.expression)  # Analyse the scripts on the script level scriptInfo <- to_full_script_info(trees)  scriptInfo  # Analyse the scripts on the function level functionInfo <- get_full_function_info(trees)  functionInfo }"},{"path":"https://kwb-r.github.io/kwb.code/reference/to_full_script_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get script statistics from a list of R script trees — to_full_script_info","title":"Get script statistics from a list of R script trees — to_full_script_info","text":"Get script statistics list R script trees","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/to_full_script_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get script statistics from a list of R script trees — to_full_script_info","text":"","code":"to_full_script_info(trees)"},{"path":"https://kwb-r.github.io/kwb.code/reference/to_full_script_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get script statistics from a list of R script trees — to_full_script_info","text":"trees list R script parse trees provided parse_scripts","code":""},{"path":[]},{"path":"https://kwb-r.github.io/kwb.code/reference/walk_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Walk Along a Parse Tree — walk_tree","title":"Walk Along a Parse Tree — walk_tree","text":"Walk Along Parse Tree","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/walk_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Walk Along a Parse Tree — walk_tree","text":"","code":"walk_tree(   x,   path = \"\",   depth = 0L,   max_depth = 20L,   dbg = TRUE,   config = list(),   context = NULL )"},{"path":"https://kwb-r.github.io/kwb.code/reference/walk_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Walk Along a Parse Tree — walk_tree","text":"x parse tree returned parse sub-tree parse tree path internal use . Path element parse tree. depth internal use . Recursion depth. max_depth maximum recursion level. Default: 20L dbg whether show debug messages config list defining modifications nodes node tree.  TODO: describe context NULL (default) expected list containing additional data. Currently list element \"file\" used pass name script current tree read .","code":""},{"path":"https://kwb-r.github.io/kwb.code/reference/walk_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Walk Along a Parse Tree — walk_tree","text":"","code":"walk_tree(parse(text = \"x <- 1:n\")) #> path: #> [1] \"\" #> props: #>   is_atomic is_recursive is_call       type       mode      class length #> 1     FALSE         TRUE   FALSE expression expression expression      1 #>                   text #> 1 expression(x <- 1:n) #> path: #> [1] \"/1\" #> props: #>   is_atomic is_recursive is_call     type mode class length     text #> 1     FALSE         TRUE    TRUE language call    <-      3 x <- 1:n #> path: #> [1] \"/1/1\" #> props: #>   is_atomic is_recursive is_call   type mode class length text #> 1     FALSE        FALSE   FALSE symbol name  name      1   <- #> Leaf reached: '<-' #> path: #> [1] \"/1/2\" #> props: #>   is_atomic is_recursive is_call   type mode class length text #> 1     FALSE        FALSE   FALSE symbol name  name      1    x #> Leaf reached: 'x' #> path: #> [1] \"/1/3\" #> props: #>   is_atomic is_recursive is_call     type mode class length text #> 1     FALSE         TRUE    TRUE language call  call      3  1:n #> path: #> [1] \"/1/3/1\" #> props: #>   is_atomic is_recursive is_call   type mode class length text #> 1     FALSE        FALSE   FALSE symbol name  name      1    : #> Leaf reached: ':' #> path: #> [1] \"/1/3/2\" #> props: #>   is_atomic is_recursive is_call   type    mode   class length text #> 1      TRUE        FALSE   FALSE double numeric numeric      1    1 #> Leaf reached: '1' #> path: #> [1] \"/1/3/3\" #> props: #>   is_atomic is_recursive is_call   type mode class length text #> 1     FALSE        FALSE   FALSE symbol name  name      1    n #> Leaf reached: 'n' #> expression(x <- 1:n)"},{"path":"https://kwb-r.github.io/kwb.code/news/index.html","id":"kwbcode-020-2022-06-09","dir":"Changelog","previous_headings":"","what":"kwb.code 0.2.0 2022-06-09","title":"kwb.code 0.2.0 2022-06-09","text":"Added NEWS.md file track changes package. see https://style.tidyverse.org/news.html writing good NEWS.md","code":""},{"path":"https://kwb-r.github.io/kwb.code/news/index.html","id":"kwbcode-010-2019-09-03","dir":"Changelog","previous_headings":"","what":"kwb.code 0.1.0 2019-09-03","title":"kwb.code 0.1.0 2019-09-03","text":"Release created within FAKIN project","code":""}]
